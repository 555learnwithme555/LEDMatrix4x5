const int matrixPins[] = {2,3,4,5,8,9,10,11,12};
const int anodes[] = {2,3,4,5};
const int cathodes[] = {8,9,10,11,12};

int delayTime = 1;
int frameSpeed = 500;


int frames[18][4][5] = {
  {
    {0,0,0,0,0},
    {0,1,1,1,0},
    {0,1,1,1,0},
    {0,0,0,0,0}
  },
  {
    {0,0,0,0,0},
    {1,1,1,1,1},
    {1,1,1,1,1},
    {1,1,1,1,1}
  },
  {
    {0,0,0,1,0},
    {0,1,0,1,0},
    {0,1,0,1,0},
    {0,1,0,0,0}
  },
  {
    {0,0,0,0,0},
    {0,1,0,1,0},
    {0,1,0,1,0},
    {0,1,0,1,0}
  },
  {
    {0,0,0,0,0},
    {1,1,0,1,1},
    {1,1,0,1,1},
    {0,0,0,1,1}
  },
  {
    {0,1,0,0,0},
    {0,1,0,1,0},
    {0,1,0,1,0},
    {0,0,0,1,0}
  },
  {
    {1,1,0,0,0},
    {1,1,0,1,0},
    {1,1,0,1,0},
    {0,0,0,0,0}
  },
  {
    {0,0,0,0,0},
    {0,1,1,1,1},
    {0,1,1,1,1},
    {0,1,1,1,1}
  },
  {
    {0,0,0,0,0},
    {0,1,0,1,0},
    {0,1,0,1,0},
    {0,0,0,0,0}
  },
  {
    {0,0,0,0,0},
    {0,1,0,1,1},
    {0,1,0,1,1},
    {0,0,0,1,1}
  },
  {
    {1,0,0,0,0},
    {0,1,0,1,1},
    {0,1,0,1,1},
    {1,0,0,0,0}
  },
  {
    {1,0,1,0,1},
    {0,1,0,1,0},
    {0,1,0,1,0},
    {0,0,0,0,0}
  },
  {
    {0,1,1,1,0},
    {0,1,1,1,0},
    {0,1,1,1,0},
    {1,0,0,0,1}
  },
  {
    {1,0,0,0,1},
    {0,1,1,1,0},
    {0,1,1,1,0},
    {0,0,0,0,0}
  },
  {
    {0,1,1,1,0},
    {0,1,0,1,0},
    {0,1,0,1,0},
    {0,0,0,0,0}
  },
  {
    {0,1,1,1,1},
    {0,1,0,1,1},
    {0,1,0,1,1},
    {0,0,0,0,0}
  },
  {
    {1,0,1,0,1},
    {1,1,1,1,0},
    {1,1,1,1,0},
    {1,0,1,0,1}
  },
  {
    {1,1,1,1,1},
    {1,1,1,1,1},
    {1,1,1,1,1},
    {1,1,1,1,1}
  }
  
};

void setup() {
  for (int i = 0; i < 9; i++) {
    pinMode(matrixPins[i], OUTPUT);
    digitalWrite(matrixPins[i], LOW);
  }
}

void loop() {
  
  //
  for (int frame = 0; frame < 18; frame++) {
    for (int s = 0; s < frameSpeed; s++) {
      for (int i = 0; i < 4; i++) {
        for (int d = 0; d < 5; d++) {
          digitalWrite(cathodes[d], frames[frame][i][d]);
        }
        digitalWrite(anodes[i], HIGH);
        delay(delayTime);
        digitalWrite(anodes[i], LOW);  
      }
    }
  }
  
  
  
  
}
